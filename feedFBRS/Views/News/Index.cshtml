@model List<feedFBRS.Models.News>

@{
    ViewBag.Title = "Feed de Notícias";
}

<style>
    .imagempost {
        width: 600px;
        z-index: 2;
        position: relative;
        left: -20px;
        top: 10px;
    }

    .fontefeed {
        font-family: 'Poppins', 'Avenir', 'Montserrat', sans-serif;
    }

    .feed-container {
        max-width: 600px;
        margin: 20px auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .user-profile {
        display: flex;
        align-items: center;
        padding: 3%;
    }

    .user-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: #007bff;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-weight: bold;
        font-size: 18px;
        margin-right: 10px;
    }

        .user-avatar.publicacao {
            width: 35px;
            height: 35px;
        }

    .user-info {
        display: flex;
        flex-direction: column;
        justify-content: center;
        margin-top: 0px;
    }

        .user-info.alinhartexto {
            position: relative;
            top: 18px;
            right: -5px;
        }

        .user-info.alinhartexto-publicacao {
            position: relative;
            top: 2px;
            right: -5px;
        }

    .post-section {
        margin-top: 20px;
    }

    .btn-arredondado {
        display: flex;
        gap: 8px;
        align-items: center;
        border-radius: 50px;
        margin-top: 10px;
        padding: 0px 0px;
        box-shadow: 2px 4px 4px rgba(0, 0, 0, 0.2);
    }

    .bolinhaTitulo {
        width: 16px;
        /* Tamanho da bolinha */
        height: 16px;
        background-color: white;
        /* Cor de fundo */
        border-radius: 50%;
        /* Faz a bolinha ficar redonda */
        display: flex;
        align-items: center;
        /* Centraliza verticalmente */
        justify-content: center;
        /* Centraliza horizontalmente */
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
        /* Pequena sombra para destacar */
        position: relative;
        right: -3px;
    }

        .bolinhaTitulo span {
            font-size: 15px;
            font-weight: bold;
            color: #2fd7aa;
            line-height: 1;
            margin-top: 2px;
        }

    .alinhartexto {
        text-align: justify-all;
    }

    .linha {
        width: 81%;
        /* Define o tamanho da linha */
        height: 2px;
        /* Espessura da linha */
        background-color: #B3B3B3;
        /* Cor da linha */
        margin: 0 auto 10px auto;
        /* Centraliza e define o espaço abaixo */
        text-align: center;
    }

    .agradecimento {
        text-align: center;
        font-size: 18px;
        /* Ajuste conforme necessário */
        color: #b0b0b0;
        /* Cor identificada */
        font-weight: bold;
        /* Caso seja necessário */
    }

    .tamanhonomeusuario {
        font-size: 14px;
    }

    .horario {
        position: relative;
        top: 3px;
        right: -33px;
        font-size: 11px;
        color: #a1a1a1;
    }

    .icon-container {
        background-color: #ccc;
        /* Fundo cinza */
        border-radius: 50%;
        /* Deixa a div redonda */
        display: flex;
        align-items: center;
        justify-content: center;
        width: 25px;
        height: 25px;
    }

    .heart-icon {
        fill: #8371DF;
        /* Cor do coração */
        transition: fill 0.2s ease-in-out;
    }

    .heart-btn:hover .heart-icon {
        fill: rgb(221, 69, 69);
        /* Cor muda ao passar o mouse */
    }

    .tirarlinha {
        outline: none;
        border: none;
        background-color: unset;
    }

    .tirarcor {
        background-color: unset;
    }

    .mudarcor {
        background-color: rgb(104, 97, 97);
    }

    .icon {
        fill: red;
        /* Muda a cor do SVG */
    }

    .positioncoment {
        position: fixed;
    }

    .comentario-box {
        width: 100%;
        max-width: 400px;
        height: 27px;
        background-color: #ccc;
        border-radius: 50px;
        display: flex;
        align-items: center;
        padding: 2px 15px;
    }

    .comentario-input {
        width: 100%;
        height: 100%;
        border: none;
        background: transparent;
        outline: none;
        font-size: 14px;
        color: #666;
        font-family: Arial, sans-serif;
        resize: none;
        overflow: hidden;
        max-width: 100%;
        line-height: 1.6;
    }

    .alintextcoment {
        color: #68676e;
        position: relative;
        left: 12px;
    }

    .positioncomentfeed {
        position: relative;
        left: 131px;
        top: -3px;
        font-size: 14px;
        color: #938989;
    }

    .postiondivi {
        margin-top: 20px;
    }

    .modal-content {
        border-radius: 20px;
        padding: 20px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        border-bottom: none;
        display: flex;
        align-items: center;
        height: 0px
    }

        .modal-header h5 {
            margin-left: -215px;
        }

        .modal-header .close {
            background: none;
            border: none;
            font-size: 41px;
            color: #007bff;
            position: relative;
            top: -13px;
            left: 32px;
        }

    .textarea-container {
        width: 100%;
        padding: 10px;
        border: 2px solid #ccc;
        border-radius: 30px;
        min-height: 100px;
    }

    .add-photo {
        display: flex;
        align-items: center;
        background-color: #8b5cf6;
        color: white;
        border-radius: 20px;
        padding: 1px 11px;
        font-size: 14px;
        cursor: pointer;
        box-shadow: 2px 4px 4px rgba(0, 0, 0, 0.2);
    }

        .add-photo svg {
            margin-right: 5px;
        }

    .btn-footer {
        background: gray;
        color: white;
        border-radius: 20px;
        padding: 0px 20px;
        border: none;
        box-shadow: 2px 4px 4px rgba(0, 0, 0, 0.2);
    }

    .image-container {
        position: relative;
        width: 100%;
        height: 150px;
        border-radius: 10px;
        overflow: hidden;
        border: 1px solid #ccc;
    }

        .image-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .remove-image {
        position: absolute;
        background-color: rgba(0, 0, 0, 0);
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: none;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        border: none;
        cursor: pointer;
    }

    .image-container:hover .remove-image {
        display: flex;
    }

    .carousel-inner {
        max-height: 400px; /* Defina a altura fixa desejada */
        overflow: hidden; /* Garante que imagens grandes não expandam o carrossel */
    }

        .carousel-inner img {
            width: 100%;
            height: 400px; /* Mantém todas as imagens com a mesma altura */
            object-fit: cover; /* Ajusta as imagens sem distorção */
        }
    
</style>

<body class="fontefeed" style="background-color: #f5f5f5;">
    <div class="feed-container">
        <!-- Perfil do Usuário -->
        <div class="user-profile">
            <div class="user-avatar"></div>
            <div class="user-info alinhartexto">
                <h5 class="m-0">Nome Usuário</h5>
                <button type="button" class="btn btn-primary btn-sm btn-arredondado alinhartexto"
                        style="background-color:#8b5cf6; border-color: #8b5cf6 " data-bs-toggle="modal"
                        data-bs-target="#novaPublicacaoModal">
                    <div class="bolinhaTitulo">
                        <span>+</span>
                    </div>
                    <div>
                        Criar publicação
                    </div>
                </button>
                <!-- Modal -->
                <div class="modal fade" id="novaPublicacaoModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <span style="color: #01cf7d; font-size: 44px;">&#x2022;</span>
                                <h5 class="modal-title">Nova Publicação</h5>
                                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
                            </div>
                            <form id="newsForm" enctype="multipart/form-data">
                                <div class="modal-body">
                                    <div style="display: flex; justify-content: center;">
                                        <textarea style="max-width: 700px;" class="textarea-container" id="content" name="content"
                                                  placeholder="Digite aqui o que você quer que apareça no feed..."></textarea>
                                    </div>
                                    <div class="mt-3 d-flex align-items-center">
                                        <label class="add-photo">
                                            <div class="bolinhaTitulo" style="position: relative; left: -6px;">
                                                <span>+</span>
                                            </div>
                                            <input type="file" id="inputFile" name="image" accept="image/*" multiple hidden>
                                            <div>
                                                Adicionar foto
                                            </div>
                                        </label>
                                        <span id="contadorFotos" class="ms-2 text-muted" style="font-size: 14px;">0/6</span>
                                    </div>
                                    <div style="min-height: 150px; gap: 8px" id="imagePreviewContainer" class="d-flex mt-3"></div>
                                </div>
                                <div class="modal-footer" style="border-top: none;">
                                    <button type="button" class="btn-footer" data-bs-dismiss="modal">Cancelar</button>
                                    <button type="submit" class="btn-footer" style="background-color: #007bff;"
                                            id="publicarBtn">
                                        Publicar
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <script>
                    document.getElementById("newsForm").addEventListener("submit", function (event) {
                        event.preventDefault(); // Impede o reload da página

                        let formData = new FormData(this);

                        // Adiciona imagens ao FormData
                        imagens.forEach((file) => {
                            formData.append(`images`, file); // Adiciona cada imagem ao FormData
                        });

                        fetch("/News/Create", {
                            method: "POST",
                            body: formData
                        }).then(response => {
                            if (response.ok) {
                                alert("Notícia publicada com sucesso!");
                                location.reload(); // Recarrega o feed para exibir a nova notícia
                            } else {
                                alert("Erro ao publicar notícia!");
                            }
                        }).catch(error => {
                            console.error("Erro:", error);
                            alert("Erro ao publicar notícia!");
                        });
                    });

                    const inputFile = document.getElementById("inputFile");
                    const imagePreviewContainer = document.getElementById("imagePreviewContainer");
                    const contadorFotos = document.getElementById("contadorFotos");
                    const publicarBtn = document.getElementById("publicarBtn");
                    const publicacoes = document.getElementById("publicacoes");

                    let imagens = [];

                    inputFile.addEventListener("change", function (event) {
                        let files = Array.from(event.target.files);

                        files.forEach(file => {
                            if (imagens.length < 6) {
                                imagens.push(file);
                            }
                        });

                        atualizarPreview();
                    });

                    function atualizarPreview() {
                        imagePreviewContainer.innerHTML = "";
                        imagens.forEach((file, index) => {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                let imgWrapper = document.createElement("div");
                                imgWrapper.classList.add("image-container");
                                imgWrapper.draggable = true; // Permitir arrastar
                                imgWrapper.setAttribute("data-index", index); // Adiciona índice para rastrear posição
                                imgWrapper.addEventListener("dragstart", dragStart);
                                imgWrapper.addEventListener("dragover", dragOver);
                                imgWrapper.addEventListener("drop", drop);

                                imgWrapper.innerHTML = `
                                    <img src="${e.target.result}" alt="Imagem">
                                    <button class="remove-image" style"" onclick="removerImagem(${index})"><svg viewBox="-3 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns" fill="#000000" stroke="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <title>trash</title> <desc>Created with Sketch Beta.</desc> <defs> </defs> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage"> <g id="Icon-Set-Filled" sketch:type="MSLayerGroup" transform="translate(-261.000000, -205.000000)" fill="#007bff"> <path d="M268,220 C268,219.448 268.448,219 269,219 C269.552,219 270,219.448 270,220 L270,232 C270,232.553 269.552,233 269,233 C268.448,233 268,232.553 268,232 L268,220 L268,220 Z M273,220 C273,219.448 273.448,219 274,219 C274.552,219 275,219.448 275,220 L275,232 C275,232.553 274.552,233 274,233 C273.448,233 273,232.553 273,232 L273,220 L273,220 Z M278,220 C278,219.448 278.448,219 279,219 C279.552,219 280,219.448 280,220 L280,232 C280,232.553 279.552,233 279,233 C278.448,233 278,232.553 278,232 L278,220 L278,220 Z M263,233 C263,235.209 264.791,237 267,237 L281,237 C283.209,237 285,235.209 285,233 L285,217 L263,217 L263,233 L263,233 Z M277,209 L271,209 L271,208 C271,207.447 271.448,207 272,207 L276,207 C276.552,207 277,207.447 277,208 L277,209 L277,209 Z M285,209 L279,209 L279,207 C279,205.896 278.104,205 277,205 L271,205 C269.896,205 269,205.896 269,207 L269,209 L263,209 C261.896,209 261,209.896 261,211 L261,213 C261,214.104 261.895,214.999 262.999,215 L285.002,215 C286.105,214.999 287,214.104 287,213 L287,211 C287,209.896 286.104,209 285,209 L285,209 Z" id="trash" sketch:type="MSShapeGroup"> </path> </g> </g> </g></svg></button>
                                `;
                                imagePreviewContainer.appendChild(imgWrapper);
                            };
                            reader.readAsDataURL(file);
                        });

                        contadorFotos.innerText = `${imagens.length}/6`;
                    }

                    function removerImagem(index) {
                        imagens.splice(index, 1);
                        atualizarPreview();

                        // Atualizar o input file para refletir as imagens restantes
                        let dataTransfer = new DataTransfer();
                        imagens.forEach(file => dataTransfer.items.add(file));
                        inputFile.files = dataTransfer.files;
                    }

                    publicarBtn.addEventListener("click", function () {
                        publicacoes.innerHTML = "<h4>Publicação</h4>";

                        imagens.forEach(file => {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                let imgElement = document.createElement("img");
                                imgElement.src = e.target.result;
                                imgElement.width = 150;
                                imgElement.style.margin = "5px";
                                publicacoes.appendChild(imgElement);
                            };
                            reader.readAsDataURL(file);
                        });

                        imagens = [];
                        atualizarPreview();

                        // Fechar a modal corretamente se estiver usando Bootstrap
                        let modalElement = document.getElementById("novaPublicacaoModal");
                        if (modalElement && bootstrap.Modal.getInstance(modalElement)) {
                            let modal = bootstrap.Modal.getInstance(modalElement);
                            modal.hide();
                        }
                    });

                    // Funções de arrastar e soltar
                    let dragIndex = null;

                    function dragStart(event) {
                        dragIndex = event.target.getAttribute("data-index");
                    }

                    function dragOver(event) {
                        event.preventDefault(); // Permite que o elemento seja solto
                    }

                    function drop(event) {
                        event.preventDefault();

                        let dropIndex = event.target.closest(".image-container").getAttribute("data-index");

                        if (dragIndex !== null && dropIndex !== null) {
                            // Converter índices para número inteiro
                            dragIndex = parseInt(dragIndex, 10);
                            dropIndex = parseInt(dropIndex, 10);

                            if (!isNaN(dragIndex) && !isNaN(dropIndex) && dragIndex !== dropIndex) {
                                // Troca as posições no array corretamente
                                [imagens[dragIndex], imagens[dropIndex]] = [imagens[dropIndex], imagens[dragIndex]];

                                // Atualiza o preview para refletir a nova ordem
                                atualizarPreview();

                                console.log(imagens);
                                // Agora será ["img3.jpg", "img2.jpg", "img1.jpg"]s
                            }
                        }
                    }



                </script>




            </div>
        </div>
        <br><br>
        <div class="container">
            <div class="linha"></div>
            <div class="agradecimento">
                Compartilhe seus momentos!
            </div>
        </div>

        <!-- POSTAGEMS -->
        <div id="feedNoticias">
            <!-- As notícias serão inseridas aqui via JavaScript -->
        </div>


    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            carregarFeed(); // Chama a função ao carregar a página

            function carregarFeed() {
                fetch("/News/GetNews") // Faz uma requisição para buscar as notícias
                    .then(response => response.json())
                    .then(data => {
                        let feedContainer = document.getElementById("feedNoticias");
                        feedContainer.innerHTML = ""; // Limpa o feed antes de adicionar novas notícias

                        data.forEach(news => {
                            console.log("Notícia recebida:", news);
                            let noticiaHTML = `
                                                    <div class="noticia">
                                                        <!-- Perfil do Usuário -->
                                                        <div class="user-profile">
                                                            <div class="user-avatar publicacao"></div>
                                                            <div class="user-info alinhartexto-publicacao">
                                                                <h5 class="m-0 tamanhonomeusuario">${news.Author}</h5>
                                                            </div>
                                                            <div class="horario">
                                                                ${formatarData(news.Id)}
                                                            </div>
                                                        </div>

                                                        <!-- Conteúdo da notícia -->
                                                        <div class="card-body" style="word-wrap: break-word; margin: 22px;">
                                                            <p class="card-text">${news.Content}</p>
                                                        </div>

                                                        <div id="carousel-${news.Id}" class="carousel slide">
                                                        <div class="carousel-inner">
                                                            ${news.ImageUrls.map((url, index) => `
                                                                <div class="carousel-item ${index === 0 ? 'active' : ''}">
                                                                    <img src="${url}" class="d-block w-100" alt="Imagem do post">
                                                                </div>
                                                            `).join('')}
                                                        </div>
                                                        <button class="carousel-control-prev" type="button" data-bs-target="#carousel-${news.Id}" data-bs-slide="prev">
                                                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                            <span class="visually-hidden">Previous</span>
                                                        </button>
                                                        <button class="carousel-control-next" type="button" data-bs-target="#carousel-${news.Id}" data-bs-slide="next">
                                                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                            <span class="visually-hidden">Next</span>
                                                        </button>
                                                        </div>
                                                        <!-- Ações -->
                                                        <div class="card-footer d-flex justify-content-between align-items-center postiondivi" style="display: flex; margin-right: 40px; margin-left: 40px;">
                                                <div>
                                                    <button class="heart-btn tirarlinha" style="padding: 0px;" onclick="curtirNoticia('${news.Id}')" data-news-id="${news.Id}">
                                                        <svg class="heart-icon tirarcor" width="27" height="27" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                            <path fill="none" stroke="#8371DF" stroke-width="2"
                                                                d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
                                                        </svg>
                                                    </button>

                                                </div>
                                                <div>
                                                    <button class="tirarlinha" sytle=""
                                                        onclick="abrirModalComentarios('${news.Id}')">
                                                        <svg aria-label="Comentar" fill="currentColor" height="24" role="img"
                                                            viewBox="0 0 24 24" width="24">
                                                            <title>Comentar</title>
                                                            <path d="M20.656 17.008a9.993 9.993 0 1 0-3.59 3.615L22 22Z"
                                                                fill="none" stroke="gray" stroke-linejoin="round" stroke-width="2">
                                                            </path>
                                                        </svg>
                                                    </button>
                                                </div>
                                                <div class="comentario-box">
                                                    <textarea id="novoComentario_${news.Id}" class="comentario-input" placeholder="Comente algo aqui..."
                                                        rows="1"></textarea>
                                                </div>
                                                <div style="padding: 6px;">
                                                    <button class="icon-container" style="border: none; outline: none; padding: 2px"
                                                        data-news-id="${news.Id}"
                                                        data-textarea-id="novoComentario_${news.Id}"
                                                        onclick="adicionarComentario(this)">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24"
                                                            fill="white">
                                                            <path d="M11.5003 12H5.41872M5.24634 12.7972L4.24158 15.7986C3.69128 17.4424 3.41613 18.2643 3.61359 18.7704C3.78506 19.21 4.15335 19.5432 4.6078 19.6701C5.13111 19.8161 5.92151 19.4604 7.50231 18.7491L17.6367 14.1886C19.1797 13.4942 19.9512 13.1471 20.1896 12.6648C20.3968 12.2458 20.3968 11.7541 20.1896 11.3351C19.9512 10.8529 19.1797 10.5057 17.6367 9.81135L7.48483 5.24303C5.90879 4.53382 5.12078 4.17921 4.59799 4.32468C4.14397 4.45101 3.77572 4.78336 3.60365 5.22209C3.40551 5.72728 3.67772 6.54741 4.22215 8.18767L5.24829 11.2793C5.34179 11.561 5.38855 11.7019 5.407 11.8459C5.42338 11.9738 5.42321 12.1032 5.40651 12.231C5.38768 12.375 5.34057 12.5157 5.24634 12.7972Z"
                                                                stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                        </svg>
                                                    </button>
                                                </div>
                                            </div>
                                            <div>
                                                <div id="comentarios-${news.Id}" class="positioncomentfeed"></div>
                                            </div>
                                                    </div>
                                                `;

                            // Adiciona a notícia ao feed
                            feedContainer.innerHTML += noticiaHTML;

                            // ✅ Agora verificamos se o usuário já curtiu a notícia ao carregar a página
                            verificarCurtidaFeed(news.Id);

                            // Buscar e atualizar o número de comentários
                            fetch(`/News/GetCommentCount?newsId=${news.Id}`)
                                .then(response => response.json())
                                .then(countData => {
                                    let comentariosDiv = document.getElementById(`comentarios-${news.Id}`);

                                    if (countData.count === 0) {
                                        comentariosDiv.style.display = "none"; // Esconde se não houver comentários
                                    } else {
                                        let textoComentario = countData.count === 1 ? "1 comentário" : `${countData.count} comentários`;

                                        comentariosDiv.innerHTML = `
                                                    ${textoComentario},
                                                    <span onclick="abrirModalComentarios('${news.Id}')"
                                                          style="color: #4d4d4d; cursor: pointer; text-decoration: none;">
                                                        <i>ver todos...</i>
                                                    </span>
                                                `;
                                        comentariosDiv.style.display = "block"; // Garante que aparece se houver comentários
                                    }
                                })
                                .catch(error => {
                                    console.error("Erro ao buscar quantidade de comentários:", error);
                                    document.getElementById(`comentarios-${news.Id}`).innerHTML = "Erro ao carregar comentários.";
                                });


                        });
                    })
                    .catch(error => console.error("Erro ao carregar o feed:", error));
            }

            function formatarData(id) {
                let ano = id.substring(0, 4);
                let mes = id.substring(4, 6);
                let dia = id.substring(6, 8);
                let hora = id.substring(8, 10);
                let minuto = id.substring(10, 12);
                return `${dia}/${mes}/${ano} ${hora}:${minuto}`;
            }

            function curtirNoticia(id) {
                fetch(`/News/Like?id=${id}`, { method: "POST" })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            carregarFeed(); // Atualiza o feed após curtir
                        }
                    })
                    .catch(error => console.error("Erro ao curtir a notícia:", error));
            }


        });



    </script>



    <!-- scrollbar -->
    <style>
        /* Estilizando a scrollbar para navegadores baseados em WebKit (Chrome, Edge, Safari) */
        ::-webkit-scrollbar {
            width: 15px; /* Largura da barra de rolagem geral */
            border-radius: 10px;
        }

        ::-webkit-scrollbar-track {
            background: #ffffff; /* Fundo branco (barra externa) */
            border-radius: 10px;
            box-shadow: 3px 3px 9px rgba(0, 0, 0, 0.3); /* Sombra apenas no lado direito e inferior */
        }

        ::-webkit-scrollbar-thumb {
            background: #a0a0a0; /* Barra de dentro cinza */
            border-radius: 10px;
            width: 8px; /* Tornando a barra de dentro mais fina */
            margin: auto;
            border: 4px solid #ffffff; /* Criando uma borda branca para dar o efeito de barra dentro da barra */
        }
    </style>

    <!-- Modal de Comentários -->
    <div class="modal fade" id="modalComentarios" tabindex="-1" aria-hidden="true" data-post-id>
        <div class="modal-dialog">
            <div class="modal-content" style="height: 500px;">
                <div class="modal-header">
                    <span style="color: #01cf7d; font-size: 26px;">●</span>
                    <h5 class="modal-title ms-2"
                        style="position: relative; left: -133px; top: 2px;">
                        Comentários
                    </h5>
                    <button type="button" class="close" style="font-size: 25px;"
                            data-bs-dismiss="modal">
                        &#10006;
                    </button>
                </div>
                <div class="modal-body" style="max-height: 400px; overflow-y: auto;" ">
                    <div id="listaComentarios" class="comentarios-container">
                        <p class="text-muted">Carregando comentários...</p>
                    </div>
                </div>
                <br>
                <div style="display: flex; gap: 6px; align-items: center; justify-content: space-around; width: 100%;">
                    <div>
                        <div class="user-profile"></div>
                        <div class="user-avatar" style="width: 27px; height: 27px; margin-right: 0px; margin-top: -2px;"></div>

                    </div>
                    <div class="comentario-box">
                        <textarea id="novoComentarioModal" class="comentario-input"
                                  placeholder="Comente algo aqui..."></textarea>
                    </div>
                    <div class="comentario-boxi">
                        <button class="icon-container" onclick="adicionarComentario(this)" style="border: none; outline: none; padding: 2px; width: 27px; height: 27px;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="white">
                                <path d="M11.5003 12H5.41872M5.24634 12.7972L4.24158 15.7986C3.69128 17.4424 3.41613 18.2643 3.61359 18.7704C3.78506 19.21 4.15335 19.5432 4.6078 19.6701C5.13111 19.8161 5.92151 19.4604 7.50231 18.7491L17.6367 14.1886C19.1797 13.4942 19.9512 13.1471 20.1896 12.6648C20.3968 12.2458 20.3968 11.7541 20.1896 11.3351C19.9512 10.8529 19.1797 10.5057 17.6367 9.81135L7.48483 5.24303C5.90879 4.53382 5.12078 4.17921 4.59799 4.32468C4.14397 4.45101 3.77572 4.78336 3.60365 5.22209C3.40551 5.72728 3.67772 6.54741 4.22215 8.18767L5.24829 11.2793C5.34179 11.561 5.38855 11.7019 5.407 11.8459C5.42338 11.9738 5.42321 12.1032 5.40651 12.231C5.38768 12.375 5.34057 12.5157 5.24634 12.7972Z"
                                      stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>



        function abrirModalComentarios(postId) {
            let modal = document.getElementById("modalComentarios");
            modal.dataset.postId = postId; // Armazena o ID do post na modal
            carregarComentarios(postId);
            new bootstrap.Modal(modal).show();
        }


        function carregarComentarios(postId) {
            let lista = document.getElementById("listaComentarios");
            let userId = localStorage.getItem("userId") || "anonimo";
           // lista.innerHTML = "<p class='text-muted'>Carregando comentários...</p>";

            fetch(`/News/GetComments?newsId=${postId}&userId=${userId}`)
                .then(response => response.json())
                .then(response => {
                    console.log("Comentários recebidos:", response);

                    if (!response.success || response.data.length === 0) {
                        lista.innerHTML = "<p class='text-muted'>Nenhum comentário ainda.</p>";
                        return;
                    }

                    lista.innerHTML = ""; // Limpa antes de adicionar os novos

                    response.data.forEach((c, index) => {
                        lista.innerHTML += `
                            <div class="comentario">
                                <div class="comentario-avatar">${c.Author.charAt(0)}</div>
                                <div class="comentario-conteudo">
                                    <span class="comentario-usuario">${c.Author}</span>
                                    <span style="font-size: 12px; color: gray;">${formatarData(c.Timestamp)}</span>
                                    <p class="comentario-texto">${c.Content}</p>
                                    <div class="comentario-acoes">
                                        <button class="tirarlinha"
                                                data-news-id="${postId}" 
                                                data-comment-id="${c.Id}" 
                                                onclick="curtirComentariu('${postId}', '${c.Id}')">
                                            <svg class="heart-icon tirarcor" width="25" height="25" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <path fill="${c.heavusedlogliked ? '#8371DF' : 'none'}" stroke="#8371DF" stroke-width="2" d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"></path>
                                            </svg>
                                        </button>
                                        <span style="font-size: 15px;color: rgb(131, 113, 223);" data-news-id="${postId}" data-comment-id="${c.Id}" id="curtidas-${postId}-${c.Id}" class="comentario-likes">
                                            <span>${c.Likes}</span> curtidas
                                        </span>
                                    </div>
                                </div>
                            </div>
                        `;
                    });
                })
                .catch(error => console.error("Erro ao carregar comentários:", error));
        }



        function formatarData(timestamp) {
            if (!timestamp) return "Data inválida";

            // Extrai o número dentro de /Date(XXXXXXXXXXXXX)/
            let match = timestamp.match(/\d+/);
            if (!match) return "Data inválida";

            let data = new Date(parseInt(match[0]));

            if (isNaN(data.getTime())) {
                return "Data inválida";
            }

            return data.toLocaleString("pt-BR", {
                day: "2-digit",
                month: "2-digit",
                year: "numeric",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit"
            });
        }

        function curtirNoticia(newsId) {
            let userId = localStorage.getItem("userId") || "anonimo";

            fetch(`/News/Like`, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `id=${encodeURIComponent(newsId)}&userId=${encodeURIComponent(userId)}`
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        atualizarIconeCurtida(newsId, data.liked);
                    }
                })
                .catch(error => console.error("Erro ao curtir a notícia:", error));
        }

        function verificarCurtidaFeed(newsId) {
            let userId = localStorage.getItem("userId") || "anonimo";

            fetch(`/News/CheckLike?id=${encodeURIComponent(newsId)}&userId=${encodeURIComponent(userId)}`)
                .then(response => response.json())
                .then(data => {
                    atualizarIconeCurtida(newsId, data.liked);
                })
                .catch(error => console.error("Erro ao verificar curtida:", error));
        }

        function atualizarIconeCurtida(newsId, liked) {
            let botao = document.querySelector(`button[data-news-id="${newsId}"] svg path`);
            if (botao) {
                if (liked) {
                    botao.setAttribute("fill", "#8371DF"); // Preenche o coração
                } else {
                    botao.setAttribute("fill", "none"); // Deixa vazio
                }
            }
        }



        function adicionarComentario(button) {
            let postId;
            let textareaId;

            let modal = document.getElementById("modalComentarios");

            if (modal && modal.classList.contains("show")) {
                // Se a modal está aberta, pega o ID do post dela
                postId = modal.dataset.postId;
                textareaId = "novoComentarioModal";
            } else {
                // Se for um comentário no feed, pega o ID do post do botão clicado
                postId = button.dataset.newsId;
                textareaId = button.dataset.textareaId;
            }

            let texto = document.getElementById(textareaId).value.trim();
            let author = "Usuário Exemplo";

            if (texto === "") {
                alert("Digite um comentário antes de enviar!");
                return;
            }

            fetch("/News/AddComment", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                body: `id=${encodeURIComponent(postId)}&commentText=${encodeURIComponent(texto)}&author=${encodeURIComponent(author)}`
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById(textareaId).value = ""; // Limpa o campo
                        carregarComentarios(postId); // Atualiza os comentários na modal
                        atualizarContadorComentarios(postId); // Atualiza a contagem de comentários no feed
                    } else {
                        alert("Erro ao adicionar comentário: " + data.message);
                    }
                })
                .catch(error => console.error("Erro ao adicionar comentário:", error));


        }

        function atualizarContadorComentarios(newsId) {
            fetch(`/News/GetCommentCount?newsId=${newsId}`)
                .then(response => response.json())
                .then(countData => {
                    let comentariosDiv = document.getElementById(`comentarios-${newsId}`);

                    if (countData.count === 0) {
                        comentariosDiv.style.display = "none"; // Esconde se não houver comentários
                    } else {
                        let textoComentario = countData.count === 1 ? "1 comentário" : `${countData.count} comentários`;

                        comentariosDiv.innerHTML = `
                            ${textoComentario},
                            <span onclick="abrirModalComentarios('${newsId}')"
                                  style="color: #4d4d4d; cursor: pointer; text-decoration: none;">
                                <i>ver todos...</i>
                            </span>
                        `;
                        comentariosDiv.style.display = "block"; // Mostra se houver comentários
                    }
                })
                .catch(error => {
                    console.error("Erro ao buscar quantidade de comentários:", error);
                    document.getElementById(`comentarios-${newsId}`).innerHTML = "Erro ao carregar comentários.";
                });
        }



        function curtirComentario(newsId, commentId) {
            let userId = localStorage.getItem("userId") || "anonimo"; // Simula um usuário, substitua pelo real

            fetch(`/News/LikeComment`, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `newsId=${encodeURIComponent(newsId)}&commentId=${encodeURIComponent(commentId)}&userId=${encodeURIComponent(userId)}`
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        carregarComentarios(newsId); // Atualiza os comentários para refletir o novo número de likes
                    }
                })
                .catch(error => console.error("Erro ao alternar curtida:", error));
        }

        function curtirComentariu(newsId, commentId) {
            let userId = localStorage.getItem("userId") || "anonimo";

            fetch(`/Comment/LikeComment`, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `newsId=${encodeURIComponent(newsId)}&commentId=${encodeURIComponent(commentId)}&userId=${encodeURIComponent(userId)}`
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        atualizarIconeCurtidaComentario(newsId, commentId, data.liked);
                    }
                })
                .catch(error => console.error("Erro ao curtir a notícia:", error));
        }

        function verificarCurtida(newsId, commentId) {
            let userId = localStorage.getItem("userId") || "anonimo";

            fetch(`/Comment/CheckLikeComment?newsId=${encodeURIComponent(newsId)}&commentId=${encodeURIComponent(commentId)}&userId=${encodeURIComponent(userId)}`)
                .then(response => response.json())
                .then(data => {
                    atualizarIconeCurtida(commentId, data.liked); // Passando o commentId corretamente
                })
                .catch(error => console.error("Erro ao verificar curtida:", error));
        }


        function atualizarIconeCurtidaComentario(newsId, commentId, liked) {
            let botao = document.querySelector(`button[data-news-id="${newsId}"][data-comment-id="${commentId}"] svg path`);
            let qtdlikes = document.querySelector(`span[data-news-id="${newsId}"][data-comment-id="${commentId}"] span`)
            debugger
            if (botao) {
                if (liked) {
                    var likes = qtdlikes.innerHTML;
                    var atualizado = parseInt(likes) + 1;
                    qtdlikes.innerHTML = atualizado;
                    botao.setAttribute("fill", "#8371DF"); // Preenche o coração
                } else {
                    var likes = qtdlikes.innerHTML;
                    var atualizado = parseInt(likes) - 1;
                    qtdlikes.innerHTML = atualizado;
                    botao.setAttribute("fill", "none"); // Deixa vazio
                }
            }
        }



    </script>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

